// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O.
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory
 * location specified by address. If load==1, the in value is loaded
 * into the memory location specified by address. This value becomes
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used.
 * Access to address>0x6000 is invalid. Access to any address in
 * the range 0x4000-0x5FFF results in accessing the screen memory
 * map. Access to address 0x6000 results in accessing the keyboard
 * memory map. The behavior in these addresses is described in the
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    Not(in=address[14], out=notAddr14);
    And(a=notAddr14, b=load, out=loadRAM);
    RAM16K(in=in, load=loadRAM, address=address[0..13], out=outRAM);

    Not(in=address[13], out=notAddr13);
    Not(in=address[12], out=notAddr12);
    And(a=address[14], b=notAddr13, out=isScreen);
    // And(a=notAddr12, b=isScreen, out=firstHalfScreen);
    // And(a=address[12], b=isScreen, out=secondHalfScreen);
    // And(a=firstHalfScreen, b=load, out=loadFirstHalfScreen);
    // And(a=secondHalfScreen, b=load, out=loadSecondHalfScreen);
    // RAM4K(in=in, load=loadFirstHalfScreen, address=address[0..11], out=outScreen1);
    // RAM4K(in=in, load=loadSecondHalfScreen, address=address[0..11], out=outScreen2);
    Screen(in=in, load=isScreen, address=address[0..12], out=outScreen);

    // And(a=address[14], b=address[13], out=isKeyboard);
    // And(a=isKeyboard, b=load, out=loadKeyboard);
    // Register(in=in, load=loadKeyboard, out=outKBD);
    Keyboard(out=outKBD);

    // Mux16(a=outScreen1, b=outScreen2, sel=address[12], out=outScreen);
    // Mux16(a=outScreen, b=outKBD, sel=address[13], out=outIO);
    // Mux16(a=outRAM, b=outIO, sel=address[14], out=out);
    Mux4Way16(a=outRAM, b=outRAM, c=outScreen, d=outKBD, sel=address[13..14], out=out);
}