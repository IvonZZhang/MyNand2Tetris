// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not(in=instruction[15], out=isAInstruction);
    Mux16(a=outALU, b=instruction, sel=isAInstruction, out=inRegA);
    And(a=instruction[15], b=instruction[5], out=cInstructionWithAasDest);
    Or(a=isAInstruction, b=cInstructionWithAasDest, out=loadRegA);                      // Instruction[5] := "A Register is one of the destinations".
    ARegister(in=inRegA, load=loadRegA, out[0..14]=addressM, out=outRegA);      // Either it's an A instruction, or A register being one of the destinations, load A.

    And(a=instruction[15], b=instruction[4], out=loadRegD);                     // Instruction[4] := "D Register is one of the destinations".
    DRegister(in=outALU, load=loadRegD, out=outRegD);                           // Either it's an C instruction or D Register is one of the destinations, load D.

    And(a=instruction[3], b=instruction[15], out=writeM);                       // Instruction[3] := "M Register is one of the destinations".

    Mux16(a=outRegA, b=inM, sel=instruction[12], out=outAorM);                  // Instruction[12] := "a". "a" denotes whether it's an instruction possibly with A Register or with M Register.
    ALU(x=outRegD, y=outAorM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6],
        out=outALU, out=outM, zr=outZr, ng=outNg);

    // Oh dear. j1 means "if <0, jump". j2 means "if =0, jump". j3 means "if >0, jump"
    Not(in=outZr, out=notZr);
    Not(in=outNg, out=notNg);
    And(a=notZr, b=notNg, out=positive);
    And(a=instruction[0], b=positive, out=positiveJump);
    And(a=instruction[1], b=outZr, out=zeroJump);
    And(a=instruction[2], b=outNg, out=negativeJump);
    // If either one of "positiveJump, zeroJump, negativeJump" is true, then jump
    Or(a=positiveJump, b=zeroJump, out=posZeroJump);
    Or(a=posZeroJump, b=negativeJump, out=letsJump);
    // Of course, it has to be a C instruction
    And(a=letsJump, b=instruction[15], out=loadPC);
    PC(in=outRegA, load=loadPC, inc=true, reset=reset, out[0..14]=pc);

}